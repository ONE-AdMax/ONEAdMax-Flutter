plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

def keystorePropertiesFile = rootProject.file("key.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.oneadmax.global.sample.java"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.oneadmax.global.sample.java"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 24
        targetSdk = 35
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }

    flavorDimensions "appKey"
    productFlavors {
        pure {
            dimension "appKey"
            manifestPlaceholders = [appKey: keystoreProperties['APP_KEY'] ?: "key_error"]
        }
        mediation {
            dimension "appKey"
            manifestPlaceholders = [appKey: keystoreProperties['APP_KEY_FOR_MEDIATION'] ?: "key_error"]
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation 'com.oneadmax.sdk:sdk-ads:1.2.2'

    // mediation sample
    // native ad는 applovin, mobon 만 지원한다.

    // AppLovin
    api 'com.applovin:applovin-sdk:13.1.0'

    // Cauly
    api 'com.google.android.gms:play-services-ads-identifier:17.0.0'
    api 'com.google.android.gms:play-services-appset:16.0.0'
    api 'com.fsn.cauly:cauly-sdk:3.5.35'

    // Mobon
    api('io.github.mobon:mobonSDK:1.0.0.65') {
        transitive = true
    }

    // UnityAds
    api 'com.unity3d.ads:unity-ads:4.14.1'

    // MezzoMedia. manlibrary_v3.0.0_20250210.jar v300
    implementation files('libs/manlibrary_v3.0.0_20250210.jar')

    // Vungle( https://github.com/Vungle/Android-SDK/tree/7.4.1/app/libs )
    api 'com.vungle:vungle-ads:7.4.3'
    api 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'

}
